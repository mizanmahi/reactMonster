{"version":3,"sources":["component/card.component.jsx","component/card-list.component.jsx","component/serachbox.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsterList","map","Searchbox","placeholder","handleChange","type","onChange","App","handleSearch","e","setState","searchfield","target","value","state","monsters","fetch","then","respons","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mTAIaA,EAAO,SAAAC,GAAK,OAAK,sBAAKC,UAAU,iBAAf,UAC1B,qBAAMC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACvB,6BAAKL,EAAMI,QAAQE,OACf,4BACKN,EAAMI,QAAQG,YCHdC,EAAW,SAAAR,GACpB,OAAQ,qBAAKC,UAAU,WAAf,SAEAD,EAAMS,YAAYC,KAAI,SAAAN,GAClB,OAAO,cAAC,EAAD,CAAMA,QAAWA,GAAcA,EAAQC,UCLjDM,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OAErB,uBACIZ,UAAU,SACVa,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCkCHG,E,kDApCb,aAAc,IAAD,8BACX,gBAeJC,aAAe,SAAAC,GACb,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAfpC,EAAKC,MAAQ,CACZC,SAAU,GACVJ,YAAa,IAJH,E,qDAQf,WAAoB,IAAD,OACjBK,MAAM,8CACLC,MAAK,SAAAC,GAAO,OAAIA,EAAQC,UACxBF,MAAK,SAAAG,GAAK,OAAI,EAAKV,SAAS,CAC3BK,SAAUK,S,oBAQZ,WAAS,IAAD,EAC2BC,KAAKP,MAA/BC,EADD,EACCA,SAAUJ,EADX,EACWA,YACXW,EAAmBP,EAASQ,QAAO,SAAA5B,GAAO,OAAIA,EAAQE,KAAK2B,cAAcC,SAASd,EAAYa,kBACrG,OACG,sBAAKhC,UAAU,MAAf,UACE,oBAAIA,UAAU,iBAAd,4BACA,cAAC,EAAD,CACEY,aAAciB,KAAKb,aACnBL,YAAY,oBAEf,cAAC,EAAD,CAAUH,YAAasB,W,GA/BZI,aCKHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.f5b63b4c.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './card.style.css';\r\n\r\nexport const Card = props => (<div className='card-container'>\r\n    <img  alt='mosnter' src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}/>\r\n    <h1>{props.monster.name}</h1>\r\n        <p>\r\n            {props.monster.email}\r\n        </p>\r\n</div>)","import React from 'react';\r\nimport './card-list.style.css';\r\n\r\nimport { Card } from './card.component'\r\n\r\nexport const CardList = props => {\r\n    return (<div className='cardList'>\r\n       {\r\n            props.monsterList.map(monster => {\r\n                return <Card monster = {monster} key={monster.id}/>\r\n            })\r\n       }\r\n    </div>)\r\n}","import React from 'react';\r\n\r\nimport './searchbox.style.css';\r\n\r\nexport const Searchbox = ({placeholder, handleChange}) => (\r\n\r\n    <input \r\n        className='search'\r\n        type='search' \r\n        placeholder={placeholder} \r\n        onChange={handleChange}>\r\n    </input>\r\n    \r\n    )","import './App.css';\nimport { Component } from 'react';\n\nimport {CardList} from './component/card-list.component';\nimport { Searchbox } from './component/serachbox.component';\n \n\nclass App extends Component {\n  constructor(){\n    super()\n    this.state = {\n     monsters: [],\n     searchfield: ''\n    }\n  }\n\ncomponentDidMount(){\n  fetch('https://jsonplaceholder.typicode.com/users')\n  .then(respons => respons.json())\n  .then(users => this.setState({\n    monsters: users\n  }))\n}\n\nhandleSearch = e => {\n  this.setState({ searchfield: e.target.value })\n}\n\n  render(){\n    const {monsters, searchfield } = this.state;\n    const filteredMonsters = monsters.filter(monster => monster.name.toLowerCase().includes(searchfield.toLowerCase()))\n   return  (\n      <div className=\"App\">\n        <h1 className='header-primary'>React Monsters</h1>\n        <Searchbox \n          handleChange={this.handleSearch} \n          placeholder='search monsters'\n        />\n       <CardList monsterList={filteredMonsters} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}